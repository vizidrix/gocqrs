

	C_Blacklist        = cqrs.C(1, 3)
	C_RescindBlacklist = cqrs.C(1, 4)
	C_Whitelist        = cqrs.C(1, 5)
	C_RescindWhitelist = cqrs.C(1, 6)


	E_Blacklisted        = cqrs.E(1, 3)
	E_BlacklistRescinded = cqrs.E(1, 4)
	E_Whitelisted        = cqrs.E(1, 5)
	E_WhitelistRescinded = cqrs.E(1, 6)


		Blacklisted:      false,
		Whitelisted:      false,


type Blacklist struct {
	cqrs.CommandMemento
	RequesterId uint64 `json:"requestintUserId"`
}


func NewBlacklist(visitorId uint64, requestingUserId uint64) Blacklist {
	return Blacklist{
		CommandMemento: cqrs.NewCommand(DOMAIN, C_Blacklist, visitorId, -1),
		RequesterId:    requestingUserId,
	}
}

type RescindBlacklist struct {
	cqrs.CommandMemento
	RequesterId uint64 `json:"requestintUserId"`
}

func NewRescindBlacklist(visitorId uint64, requestingUserId uint64) RescindBlacklist {
	return RescindBlacklist{
		CommandMemento: cqrs.NewCommand(DOMAIN, C_RescindBlacklist, visitorId, -1),
		RequesterId:    requestingUserId,
	}
}

type Whitelist struct {
	cqrs.CommandMemento
	RequesterId uint64 `json:"requestintUserId"`
}

func NewWhitelist(visitorId uint64, requestingUserId uint64) Whitelist {
	return Whitelist{
		CommandMemento: cqrs.NewCommand(DOMAIN, C_Whitelist, visitorId, -1),
		RequesterId:    requestingUserId,
	}
}

type RescindWhitelist struct {
	cqrs.CommandMemento
	RequesterId uint64 `json:"requestintUserId"`
}

func NewRescindWhitelist(visitorId, requestingUserId uint64) RescindWhitelist {
	return RescindWhitelist{
		CommandMemento: cqrs.NewCommand(DOMAIN, C_RescindWhitelist, visitorId, -1),
		RequesterId:    requestingUserId,
	}
}


type Blacklisted struct {
	cqrs.EventMemento
	RequesterId uint64 `json:"requestinguserid"`
}

func NewBlacklisted(visitorId uint64, requestingUserId uint64) Blacklisted {
	return Blacklisted{
		EventMemento: cqrs.NewEvent(DOMAIN, E_Blacklisted, visitorId, -1),
		RequesterId:  requestingUserId,
	}
}

type BlacklistRescinded struct {
	cqrs.EventMemento
	RequesterId uint64 `json:"requestinguserid"`
}

func NewBlacklistRescinded(visitorId uint64, requestingUserId uint64) BlacklistRescinded {
	return BlacklistRescinded{
		EventMemento: cqrs.NewEvent(DOMAIN, E_BlacklistRescinded, visitorId, -1),
		RequesterId:  requestingUserId,
	}
}

type Whitelisted struct {
	cqrs.EventMemento
	RequesterId uint64 `json:"requestinguserid"`
}

func NewWhitelisted(visitorId uint64, requestingUserId uint64) Whitelisted {
	return Whitelisted{
		EventMemento: cqrs.NewEvent(DOMAIN, E_Whitelisted, visitorId, -1),
		RequesterId:  requestingUserId,
	}
}

type WhitelistRescinded struct {
	cqrs.EventMemento
	RequesterId uint64 `json:"requestinguserid"`
}

func NewWhitelistRescinded(visitorId uint64, requestingUserId uint64) WhitelistRescinded {
	return WhitelistRescinded{
		EventMemento: cqrs.NewEvent(DOMAIN, E_WhitelistRescinded, visitorId, -1),
		RequesterId:  requestingUserId,
	}
}

	case Blacklist:
		{
			fmt.Printf("Trying to ban visitor!\n->\t%v\n", command)
			// Load aggregate
			// TODO: Change cqrs to es
			events, err := es.ReadAllEvents(command.(cqrs.Aggregate))

			if len(events) == 0 { // New visitor
				//eventBus <- NewRegistered(command.(cqrs.Aggregate).GetId(), cmd.RequesterId)
			}

			fmt.Printf("E [ \n\t%v\n ] \nErr [ %s ]\n\n", events, err)
			// Check validation
			// Emit events
			eventBus <- NewBlacklisted(command.(cqrs.Aggregate).GetId(), cmd.RequesterId)
			// Poof done
		}
	case RescindBlacklist:
		{
			fmt.Printf("Trying to lift a visitor ban...\n->\t%v\n", command)
			// Load aggregate
			// TODO: Change cqrs to es
			events, err := es.ReadAllEvents(command.(cqrs.Aggregate))

			fmt.Printf("E [ \n\t%v\n ] \tErr [ %s ]\n\n", events, err)
			// Check validation
			// Emit events
			eventBus <- NewBlacklistRescinded(command.(cqrs.Aggregate).GetId(), cmd.RequesterId)
			// Poof done
		}
	case Whitelist:
		{
			fmt.Printf("Trying to whitelist visitor\n->\t%v\n", command)
			eventBus <- NewWhitelisted(cmd.GetId(), cmd.RequesterId)
		}
	case RescindWhitelist:
		{
			fmt.Printf("Trying to rescind whitelist for visitor\n->\t%v\n", command)
			eventBus <- NewWhitelistRescinded(cmd.GetId(), cmd.RequesterId)
		}

